# uni_parser

Универсальный синтаксический анализатор
на основе расширенной формы Бэкуса-Наура (РБНФ)

Использование:
1) в файл lang.rbnf поместить описание языка в расширенной форме Бэкуса-Наура
<goal>       ::= symbol = <expression>
<expression> ::= <term> {, <term>}
<term>       ::= <factor> { <factor> }
<factor>     ::= <symbol> | [<term>]

Пример (Н.Вирт):
A= x, (B).
B= A C.
C= [+A].

В данном случае
  x, (, ), + -терминальные символы
  A, B, C - нетерминальные символы
  [+A] - повторение 0 или большее число раз "+A" (для A будет подстановка)
  , - выбор альтернативы (x или "(B)", где для B будет подстановка )

допустимы метаслова (регистр важен): ANY, EMPTY, EXCLUDE_ON, EXCLUDE_OFF

ANY - любой идентификатор (ident)
EMPTY - "пустой" символ, т.е. парсер пропускает обрабатываемый блок
EXCLUDE_ON - включить режим инверсной логики
EXCLUDE_OFF - выключить режим инверсной логики
 например, name= EXCLUDE_ON reserved_words EXCLUDE_OFF.
           reserved_words= if, then, var.
после прохода по правилу name результат будет "истина",
если анализируемый идентификатор не является if, then, var.


допустимы однострочные комментарии
все строки, начинающиеся на # или // игнорируются

2) в файл test_programm.xxx поместить текст для грамматического разбора

Пример:
(x+x)

3) запустить программу uni_parser.
Синтаксический разбор будет произведен по первому правилу файла lang.rbnf
В резульате появится синтаксический разбор и результат
CORRECT - правильно
INCORRECT - есть ошибка.
Останов происходит на месте несоответствия правил входному потоку.

Компиляция:
fpc token_utils.pas - соберется модуль token_utils.ppu базовые определения
fpc sym_scanner.pas - соберется модуль sym_scanner.ppu выделения отдельных токенов из входного файла
fpc rbnf_scanner.pas - соберется модуль rbnf_scanner.ppu проверки синтаксиса lang.rbnf
fpc rbnf_gen.pas - соберется модуль rbnf_gen.ppu построения синтаксического дерева
fpc uni_parser.fpc - окончательная сборка проекта
