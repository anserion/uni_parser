//Copyright 2016 Andrey S. Ionisyan (anserion@gmail.com)
//
//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.

unit sym_scanner;

interface

const max_sym_table_size=100;
      digits=['0'..'9'];
      eng_letters=['A'..'Z','a'..'z'];
      spec_letters=[',',';','!','%','?','#','$','@','&','^',
                    '/','\','|','=','<','>','(',')','{','}',
                    '[',']','+','-','*','.','''','"','`',':','~'];
//–ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ 2 –±–∞–π—Ç–∞/—Å–∏–º–≤–æ–ª UTF8
      rus_cp1251_letters=['¿','¡','¬','√','ƒ','≈','®','∆','«','»','…',
                          ' ','À','Ã','Õ','Œ','œ','–','—','“','”','‘',
                          '’','÷','◊','ÿ','Ÿ','€','‹','⁄','›','ﬁ','ﬂ',
                          '‡','·','‚','„','‰','Â','∏','Ê','Á','Ë','È',
                          'Í','Î','Ï','Ì','Ó','Ô','','Ò','Ú','Û','Ù',
                          'ı','ˆ','˜','¯','˘','˚','¸','˙','˝','˛','ˇ'];

      rus_cp866_letters=['Ä','Å','Ç','É','Ñ','Ö','','Ü','á','à','â',
                         'ä','ã','å','ç','é','è','ê','ë','í','ì','î',
                         'ï','ñ','ó','ò','ô','õ','ú','ö','ù','û','ü',
                         '†','°','¢','£','§','•','Ò','¶','ß','®','©',
                         '™','´','¨','≠','Æ','Ø','‡','·','‚','„','‰',
                         'Â','Ê','Á','Ë','È','Î','Ï','Í','Ì','Ó','Ô'];

      rus_koi8r_letters=['·','‚','˜','Á','‰','Â','≥','ˆ','˙','È','Í',
                         'Î','Ï','Ì','Ó','Ô','','Ú','Û','Ù','ı','Ê',
                         'Ë','„','˛','˚','˝','˘','¯','ˇ','¸','‡','Ò',
                         '¡','¬','◊','«','ƒ','≈','£','÷','⁄','…',' ',
                         'À','Ã','Õ','Œ','œ','–','“','”','‘','’','∆',
                         '»','√','ﬁ','€','›','Ÿ','ÿ','ﬂ','‹','¿','—'];

type
t_charfile=file of char;

t_sym=record 
    kind: (nul,oper,num,ident); {—Ç–∏–ø –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞}
    tag:integer;   {–≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç —á–∏—Å–ª–æ-–º–µ—Ç–∫–∞ (–∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–æ)}
    i_name:integer;  {—á–∏—Å–ª–æ–≤–æ–µ –∏–º—è-–∫–æ–¥ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏}
    s_name:string;   {—Å—Ç—Ä–æ–∫–æ–≤–æ–µ –∏–º—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞}
end;

t_sym_table=array[1..max_sym_table_size] of t_sym;

procedure sym_table_read_from_file(filename: string;
                                   var sym_table:t_sym_table;
                                   var symbols_num:integer);

implementation

var ch,ch2: char; {–ø–æ—Å–ª–µ–¥–Ω–∏–π –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–π –≤—Ö–æ–¥–Ω–æ–π —Å–∏–º–≤–æ–ª –∏ —Å–ª–µ–¥—É—é—â–∏–π –∑–∞ –Ω–∏–º}
    start_of_file, end_of_file:boolean;

{–ø—Ä–æ—á–∏—Ç–∞—Ç—å –∏–∑ –ø–æ—Ç–æ–∫–∞ –≤–≤–æ–¥–∞ –¥–≤–∞ —Å–∏–º–≤–æ–ª–∞ –∏ –ø–æ–º–µ—Å—Ç–∏—Ç—å –∏—Ö –≤ ch, ch2}
procedure getch(var f:t_charfile; var ch,ch2:char);
begin
  if end_of_file then begin write('UNEXPECTED END OF FILE'); halt(-1); end;
  if eof(f) then end_of_file:=true;
  if start_of_file then begin ch:=' '; ch2:=' '; end;
  if end_of_file then begin ch:=ch2; ch2:=' '; end;

  if not(end_of_file) and not(start_of_file) then
  begin ch:=ch2; read(f,ch2); end;

  if not(end_of_file) and start_of_file then
  begin
     read(f,ch); start_of_file:=false;
     if not(eof(f)) then read(f,ch2) else ch2:=' ';
  end;
end {getch};

{–Ω–∞–π—Ç–∏ –≤–æ –≤—Ö–æ–¥–Ω–æ–º –ø–æ—Ç–æ–∫–µ —Ç–µ—Ä–º–∏–Ω–∞–ª—å–Ω—ã–π —Å–∏–º–≤–æ–ª}
function getsym(var f:t_charfile):t_sym;
var id: t_sym;
begin {getsym}
  {–ø—Ä–æ–ø—É—Å–∫–∞–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã –∏ –∫–æ–Ω—Ü—ã —Å—Ç—Ä–æ–∫}
  while (ch=' ')or(ch=chr(10))or(ch=chr(13)) do getch(f,ch,ch2);

  id.s_name:='';
  id.kind:=nul;

  {–µ—Å–ª–∏ ch - –±—É–∫–≤–∞ –∏–ª–∏ –∑–Ω–∞–∫ –ø–æ–¥—á–µ—Ä–∫–∏–≤–Ω–∏—è, —Ç–æ —ç—Ç–æ - –Ω–∞—á–∞–ª–æ –∏–º–µ–Ω–∏}
  //–ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ 2-—Ö –±–∞–π—Ç–æ–≤—ã—Ö —Å–∏–º–≤–æ–ª–∞—Ö UTF8
  if (ch in ['_']+eng_letters+rus_cp1251_letters) then
  begin
    id.kind:=ident;
    {—á–∏—Ç–∞–µ–º –ø–æ—Å–∏–º–≤–æ–ª—å–Ω–æ –∏–º—è id[], —Å–æ—Å—Ç–æ—è—â–µ–µ –∏–∑ –±—É–∫–≤ A-Z, —Ü–∏—Ñ—Ä, –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è}
    repeat
      id.s_name:=id.s_name+ch;
      getch(f,ch,ch2);
    until not(ch in ['_']+eng_letters+digits+rus_cp1251_letters) or end_of_file;
    if (ch in ['_']+eng_letters+digits+rus_cp1251_letters) and end_of_file then
       id.s_name:=id.s_name+ch;
  end
    else
  if ch in digits then {–µ—Å–ª–∏ ch - —Ü–∏—Ñ—Ä–∞, —Ç–æ —ç—Ç–æ - –Ω–∞—á–∞–ª–æ —á–∏—Å–ª–∞}
  begin
    id.kind:=num;
    repeat
      id.s_name:=id.s_name+ch;
      getch(f,ch,ch2);
    until not(ch in digits) or end_of_file;
    if (ch in digits) and end_of_file then id.s_name:=id.s_name+ch;
    if (ch='.')and(ch2 in digits) then
    begin
      id.s_name:=id.s_name+ch;
      getch(f,ch,ch2);
      repeat
        id.s_name:=id.s_name+ch;
        getch(f,ch,ch2);
      until not(ch in digits) or end_of_file;
      if (ch in digits) and end_of_file then id.s_name:=id.s_name+ch
    end;
  end
    else
  if ch in spec_letters then
  begin {–æ–¥–Ω–æ—Å–∏–º–≤–æ–ª—å–Ω—ã–π –∏ –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –¥–≤—É—Å–∏–º–≤–æ–ª—å–Ω—ã–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã}
    id.kind:=oper;
    {–æ–¥–Ω–æ—Å–∏–º–≤–æ–ª—å–Ω—ã–µ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã}
    id.s_name:=ch;
    {—Ä–∞–∑–±–æ—Ä —Å–ª—É—á–∞–µ–≤ –¥–≤—É—Å–∏–º–≤–æ–ª—å–Ω—ã—Ö —Å–ø–µ—Ü–∫–æ–º–±–∏–Ω–∞—Ü–∏–π}
    if (ch='-')and(ch2='>') then begin id.s_name:='->'; getch(f,ch,ch2); end;
    if (ch='<')and(ch2='-') then begin id.s_name:='<-'; getch(f,ch,ch2); end;
    if (ch='<')and(ch2='>') then begin id.s_name:='<>'; getch(f,ch,ch2); end;
    if (ch='!')and(ch2='=') then begin id.s_name:='!='; getch(f,ch,ch2); end;
    if (ch='=')and(ch2='=') then begin id.s_name:='=='; getch(f,ch,ch2); end;
    if (ch=':')and(ch2='=') then begin id.s_name:=':='; getch(f,ch,ch2); end;
    if (ch='<')and(ch2='=') then begin id.s_name:='<='; getch(f,ch,ch2); end;
    if (ch='>')and(ch2='=') then begin id.s_name:='>='; getch(f,ch,ch2); end;
    if (ch='(')and(ch2='*') then begin id.s_name:='(*'; getch(f,ch,ch2); end;
    if (ch='*')and(ch2=')') then begin id.s_name:='*)'; getch(f,ch,ch2); end;
    if (ch='+')and(ch2='+') then begin id.s_name:='++'; getch(f,ch,ch2); end;
    if (ch='-')and(ch2='-') then begin id.s_name:='--'; getch(f,ch,ch2); end;
    if (ch='*')and(ch2='*') then begin id.s_name:='**'; getch(f,ch,ch2); end;
    if (ch='.')and(ch2='.') then begin id.s_name:='..'; getch(f,ch,ch2); end;
    if (ch=':')and(ch2=':') then begin id.s_name:='::'; getch(f,ch,ch2); end;
    if (ch='/')and(ch2='/') then begin id.s_name:='//'; getch(f,ch,ch2); end;
    if (ch='|')and(ch2='|') then begin id.s_name:='||'; getch(f,ch,ch2); end;
    if (ch='&')and(ch2='&') then begin id.s_name:='&&'; getch(f,ch,ch2); end;
    if (ch='^')and(ch2='^') then begin id.s_name:='^^'; getch(f,ch,ch2); end;
    {—Å–º–∞–π–ª–∏–∫–∏ :) }
    if (ch=':')and(ch2=')') then begin id.s_name:=':)'; getch(f,ch,ch2); end;
    if (ch=':')and(ch2='(') then begin id.s_name:=':('; getch(f,ch,ch2); end;
    if (ch=':')and(ch2=']') then begin id.s_name:=':]'; getch(f,ch,ch2); end;
    if (ch=':')and(ch2='[') then begin id.s_name:=':['; getch(f,ch,ch2); end;

    if not(end_of_file) then getch(f,ch,ch2);
  end
    else
  begin
    id.s_name:=ch;
    id.kind:=nul;
    if not(end_of_file) then getch(f,ch,ch2);
  end;
  writeln('symbol: ',id.s_name);
  getsym:=id;
end {getsym};
//==================================================================

procedure sym_table_read_from_file(filename: string;
                                   var sym_table:t_sym_table;
                                   var symbols_num:integer);
var f:t_charfile; sym:t_sym;
begin
  start_of_file:=true; end_of_file:=false;
  symbols_num:=0; 
  assign(f,filename);
  reset(f);
  getch(f,ch,ch2); sym:=getsym(f);
  //—á–∏—Ç–∞–µ–º –≤—Å–µ —Å–∏–º–≤–æ–ª—ã –∏–∑ —Ñ–∞–π–ª–∞ –≤ —Ç–∞–±–ª–∏—Ü—É —Å–∏–º–≤–æ–ª–æ–≤
  while (sym.s_name<>'end_of_file') do
  begin
    symbols_num:=symbols_num+1;
    sym_table[symbols_num]:=sym;
    sym:=getsym(f);
  end;
  close(f);
end;

var i:integer;
    sym_table:array[1..max_sym_table_size] of t_sym;
    symbols_num:integer;

begin
sym_table_read_from_file('rbnf_rules.bnf',sym_table,symbols_num);
for i:=1 to symbols_num do
    writeln('kind: ',sym_table[i].kind, ', symbol: ',sym_table[i].s_name);
writeln('Symbols table OK');
writeln('================');
end.
